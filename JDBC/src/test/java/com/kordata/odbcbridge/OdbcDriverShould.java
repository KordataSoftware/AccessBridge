/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.kordata.odbcbridge;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import okhttp3.HttpUrl;
import okhttp3.mockwebserver.MockWebServer;
import static org.junit.Assert.*;
import static org.junit.Assume.assumeNoException;
import java.io.IOException;
import java.sql.Connection;

public class OdbcDriverShould {
    private final MockWebServer server;
    private final OdbcDriver driver;

    private String aSupportedConnectionString =
            "jdbc:odbcbridge://localhost:5000;databaseName=myDb";

    private String anUnsupportedConnectionString = "jdbc:mysql://localhost:5000";

    private String buildConnectionString(HttpUrl baseUrl) {
        return "jdbc:odbcbridge://" + baseUrl.host() + ":" + baseUrl.port()
                + ";databaseName=a_database;user=aUser;password=aPassword;useSsl=false;";
    }

    public OdbcDriverShould() {
        server = new MockWebServer();
        driver = new OdbcDriver();
    }

    @Before
    public void setUp() throws IOException {
        server.start();
    }

    @After
    public void tearDown() throws IOException {
        if (server != null) {
            server.shutdown();
        }
    }

    @Test
    public void rejectUnsupportedConnectionStrings() {
        try {
            boolean result = driver.acceptsURL(anUnsupportedConnectionString);

            assertFalse(result);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void acceptSupportedConnectionStrings() {
        try {
            boolean result = driver.acceptsURL(aSupportedConnectionString);

            assertTrue(result);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void returnConnectionOnConnect() throws IOException {
        String connectionString = buildConnectionString(server.url("/"));

        try {
            Connection conn = driver.connect(connectionString, null);

            assertNotNull(conn);
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            server.close();
            server.shutdown();
        }
    }
}
