/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.kordata.odbcbridge;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import okhttp3.HttpUrl;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import static org.junit.Assert.*;
import static org.junit.Assume.assumeNoException;
import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class BridgeAPIShould {
    private final ObjectMapper mapper;
    private final MockWebServer server;
    private final BridgeAPI api;

    private String aConnectionString =
            "jdbc:odbcbridge://somehost:5000;databaseName=a_database;user=aUser;password=aPassword;";

    private String aBadConnectionString = "asdflkjasdf";

    private String buildConnectionString(HttpUrl baseUrl) {
        return "jdbc:odbcbridge://" + baseUrl.host() + ":" + baseUrl.port()
                + ";databaseName=a_database;user=aUser;password=aPassword;useSsl=false;";
    }

    public BridgeAPIShould() {
        mapper = new ObjectMapper();
        server = new MockWebServer();
        api = new BridgeAPI();
    }

    private String buildQueryResponseString(int numResults) {
        ArrayNode resultNode = mapper.createArrayNode();

        for (int i = 0; i < numResults; i++) {
            ObjectNode obj = mapper.createObjectNode();
            obj.put("LastName", "LName" + i);
            obj.put("FirstName", "FName" + i);
            resultNode.add(obj);
        }
        try {
            ObjectNode responseNode = mapper.createObjectNode();
            responseNode.set("schema", mapper.createArrayNode());
            responseNode.set("results", resultNode);

            return mapper.writeValueAsString(responseNode);
        } catch (Exception e) {
            assumeNoException(e);
            return "";
        }
    }

    private String buildMutateResponseString(int rowsAffected) {
        ObjectNode node = mapper.createObjectNode();

        node.put("rowsAffected", rowsAffected);

        try {
            return mapper.writeValueAsString(node);
        } catch (Exception e) {
            assumeNoException(e);
            return "";
        }
    }

    @Before
    public void setUp() throws IOException {
        server.start();
    }

    @After
    public void tearDown() throws IOException {
        if (server != null) {
            server.shutdown();
        }
    }

    @Test
    public void parseHostFromConnectionString() {
        api.setURL(aConnectionString);

        assertEquals("somehost", api.getHost());
    }

    @Test
    public void parsePortFromConnectionString() {
        api.setURL(aConnectionString);

        assertEquals(5000, api.getPort());
    }

    @Test
    public void parseDatabaseNameFromConnectionString() {
        api.setURL(aConnectionString);

        assertEquals("a_database", api.getDatabase());
    }

    @Test
    public void parseUserNameFromConnectionString() {
        api.setURL(aConnectionString);

        assertEquals("aUser", api.getUsername());
    }

    @Test
    public void parsePasswordFromConnectionString() {
        api.setURL(aConnectionString);

        assertEquals("aPassword", api.getPassword());
    }

    @Test
    public void handleBadConnectionStrings() {
        api.setURL(aBadConnectionString);

        assertNull(api.getHost());
        assertNull(api.getDatabase());
    }

    @Test
    public void returnQueryResultFromQuery() throws IOException, InterruptedException {
        // Arrange
        int resultSetSize = 3;
        server.enqueue(new MockResponse().setBody(buildQueryResponseString(resultSetSize)));

        api.setURL(buildConnectionString(server.url("/")));

        String query = "SELECT * FROM CUSTOMERS WHERE LastName = ?";

        ArrayNode params = mapper.createArrayNode();
        params.add("Test");
        ObjectNode expectedRequest = mapper.createObjectNode();
        expectedRequest.put("command", query);
        expectedRequest.set("parameters", params);

        // Act
        ObjectNode result = api.query(query, params);

        // Assert
        assertTrue(result.has("schema"));
        assertTrue(result.has("results"));

        ArrayNode results = (ArrayNode) result.get("results");

        assertEquals(resultSetSize, results.size());
        RecordedRequest request = server.takeRequest();
        ObjectNode requestBody = (ObjectNode) mapper.readTree(request.getBody().readUtf8());

        assertEquals("/v1/a_database/query", request.getPath());
        assertEquals(requestBody, expectedRequest);
    }

    @Test
    public void returnCorrectNumberOfRowsUpdatedForMutate()
            throws IOException, InterruptedException {
        // Arrange
        int rowsAffected = 3;
        server.enqueue(new MockResponse().setBody(buildMutateResponseString(rowsAffected)));

        api.setURL(buildConnectionString(server.url("/")));

        String query = "UPDATE CUSTOMERS SET FirstName = 'Hello' WHERE LastName = ?";

        ArrayNode params = mapper.createArrayNode();
        params.add("Test");
        ObjectNode expectedRequest = mapper.createObjectNode();
        expectedRequest.put("command", query);
        expectedRequest.set("parameters", params);

        // Act
        int result = api.mutate(query, params);

        // Assert
        assertEquals(rowsAffected, result);
        RecordedRequest request = server.takeRequest();
        ObjectNode requestBody = (ObjectNode) mapper.readTree(request.getBody().readUtf8());

        assertEquals("/v1/a_database/query", request.getPath());
        assertEquals(requestBody, expectedRequest);
    }
}
