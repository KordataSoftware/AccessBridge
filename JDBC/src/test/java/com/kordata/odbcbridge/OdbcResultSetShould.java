/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.kordata.odbcbridge;

import org.junit.Before;
import org.junit.After;
import org.junit.Test;
import okhttp3.HttpUrl;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import static org.junit.Assert.*;
import static org.junit.Assume.assumeNoException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.stream.IntStream;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class OdbcResultSetShould {
    private final ObjectMapper mapper;
    private final MockWebServer server;
    private final OdbcDriver driver;

    private Statement statement;
    private Connection connection;
    private String connectionString;

    private String buildConnectionString(HttpUrl baseUrl) {
        return "jdbc:odbcbridge://" + baseUrl.host() + ":" + baseUrl.port()
                + ";databaseName=a_database;user=aUser;password=aPassword;useSsl=false;";
    }

    public OdbcResultSetShould() {
        mapper = new ObjectMapper();
        server = new MockWebServer();
        driver = new OdbcDriver();
    }

    private String buildQueryResponseString(int numResults) {
        ArrayNode node = mapper.createArrayNode();

        for (int i = 0; i < numResults; i++) {
            ObjectNode obj = mapper.createObjectNode();
            obj.put("LastName", "LName" + i);
            obj.put("FirstName", "FName" + i);
            node.add(obj);
        }

        try {
            return mapper.writeValueAsString(node);
        } catch (Exception e) {
            assumeNoException(e);
            return "";
        }
    }

    private String buildMutateResponseString(int rowsAffected) {
        ObjectNode node = mapper.createObjectNode();

        node.put("rowsAffected", rowsAffected);

        try {
            return mapper.writeValueAsString(node);
        } catch (Exception e) {
            assumeNoException(e);
            return "";
        }
    }

    @Before
    public void setUp() throws IOException, SQLException {
        server.start();
        connectionString = buildConnectionString(server.url("/"));
    }

    @After
    public void tearDown() throws IOException, SQLException {
        if (statement != null) {
            statement.close();
        }

        if (connection != null) {
            connection.close();
        }
        if (server != null) {
            server.shutdown();
        }
    }

    private ObjectNode createTestRecord(int index) {
        ObjectNode record = mapper.createObjectNode();
        record.put("FirstName", "fName" + index);
        record.put("LastName", "lName" + index);
        record.put("ADateTime", "2019-04-09T14:30:01Z");
        record.put("ABoolean", true);
        record.put("AnInteger", index);
        record.put("ADouble", 42.3);
        record.put("ATime", "14:30:01Z");
        record.put("ADate", "2019-04-09");
        record.putNull("ANull");

        return record;
    }

    @Test
    public void containCorrectNumberOfRecords() throws JsonProcessingException {
        int testRecordCount = 25;
        ArrayNode responseRoot = mapper.createArrayNode();
        IntStream.range(0, 25).mapToObj(this::createTestRecord).forEach(r -> responseRoot.add(r));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords");

            int resultCount = 0;
            while (rs.next()) {
                resultCount++;
            }

            assertEquals(testRecordCount, resultCount);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void returnCorrectColumnWhenAccessedByIndex() throws JsonProcessingException {
        ArrayNode responseRoot = mapper.createArrayNode();
        responseRoot.add(createTestRecord(0));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            rs.next();

            String actual = rs.getString(2);

            assertEquals("lName0", actual);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void returnCorrectColumnWhenAccessedByName() throws JsonProcessingException {
        ArrayNode responseRoot = mapper.createArrayNode();
        responseRoot.add(createTestRecord(0));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            rs.next();

            String actual = rs.getString("ANull");

            assertNull(actual);
            assertTrue(rs.wasNull());
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void findColumnIndexFromName() throws JsonProcessingException {
        ArrayNode responseRoot = mapper.createArrayNode();
        responseRoot.add(createTestRecord(0));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            int actual = rs.findColumn("AnInteger");
            assertEquals(5, actual);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void knowWhenItIsBeforeFirst() throws JsonProcessingException {
        ArrayNode responseRoot = mapper.createArrayNode();
        IntStream.range(0, 5).mapToObj(this::createTestRecord).forEach(r -> responseRoot.add(r));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            assertTrue(rs.isBeforeFirst());
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void knowWhenItIsAfterLast() throws JsonProcessingException {
        ArrayNode responseRoot = mapper.createArrayNode();
        IntStream.range(0, 5).mapToObj(this::createTestRecord).forEach(r -> responseRoot.add(r));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            while (rs.next()) {

            }

            assertTrue(rs.isAfterLast());
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void moveToLastRow() throws JsonProcessingException {
        int resultSetSize = 10;
        ArrayNode responseRoot = mapper.createArrayNode();
        IntStream.range(0, resultSetSize).mapToObj(this::createTestRecord)
                .forEach(r -> responseRoot.add(r));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            rs.last();
            String actual = rs.getString(1);

            assertEquals("fName" + (resultSetSize - 1), actual);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void moveToFirstRow() throws JsonProcessingException {
        int resultSetSize = 10;
        ArrayNode responseRoot = mapper.createArrayNode();
        IntStream.range(0, resultSetSize).mapToObj(this::createTestRecord)
                .forEach(r -> responseRoot.add(r));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            rs.first();
            String actual = rs.getString(1);

            assertEquals("fName" + 0, actual);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void moveToSpecificRow() throws JsonProcessingException {
        int resultSetSize = 10;
        int targetRow = 7;
        ArrayNode responseRoot = mapper.createArrayNode();
        IntStream.range(0, resultSetSize).mapToObj(this::createTestRecord)
                .forEach(r -> responseRoot.add(r));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            rs.absolute(targetRow);
            String actual = rs.getString(1);

            assertEquals("fName" + (targetRow - 1), actual);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void handleNullValuesAccordingToJdbcSpec() throws JsonProcessingException {
        ArrayNode responseRoot = mapper.createArrayNode();
        responseRoot.add(createTestRecord(0));

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT * FROM TestRecords LIMIT 1");

            rs.next();

            String actual = rs.getString("LastName");

            assertEquals("lName0", actual);
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void parseIso8601DateToTimestamp() throws JsonProcessingException {
        String fieldName = "anIso8601Date";
        String fieldValue = "2019-04-09T14:30:01Z";

        ArrayNode responseRoot = mapper.createArrayNode();
        ObjectNode rowNode = mapper.createObjectNode();
        rowNode.put(fieldName, fieldValue);
        responseRoot.add(rowNode);

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT anIso8601Date FROM Customers");

            rs.next();
            Timestamp actual = rs.getTimestamp(fieldName);

            Instant expected = Instant.parse(fieldValue);

            assertEquals(expected, actual.toInstant());
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void parseJsonDateToDate() throws JsonProcessingException {
        String fieldName = "aJsonDate";
        String fieldValue = "2019-04-09";

        ArrayNode responseRoot = mapper.createArrayNode();
        ObjectNode rowNode = mapper.createObjectNode();
        rowNode.put(fieldName, fieldValue);
        responseRoot.add(rowNode);

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT aJsonDate FROM Customers");

            rs.next();
            Date actual = rs.getDate(fieldName);

            LocalDate expected = LocalDate.parse(fieldValue);

            assertEquals(expected, actual.toLocalDate());
        } catch (Exception e) {
            assumeNoException(e);
        }
    }

    @Test
    public void parseJsonTimeToTime() throws JsonProcessingException {
        String fieldName = "aJsonTime";
        String fieldValue = "14:30:01";

        ArrayNode responseRoot = mapper.createArrayNode();
        ObjectNode rowNode = mapper.createObjectNode();
        rowNode.put(fieldName, fieldValue);
        responseRoot.add(rowNode);

        server.enqueue(new MockResponse().setResponseCode(200));
        server.enqueue(new MockResponse().setBody(mapper.writeValueAsString(responseRoot)));

        try {
            connection = driver.connect(connectionString, null);
            statement = connection.createStatement();

            ResultSet rs = statement.executeQuery("SELECT aJsonTime FROM Customers");

            rs.next();
            Time actual = rs.getTime(fieldName);

            LocalTime expected = LocalTime.parse(fieldValue);

            assertEquals(expected, actual.toLocalTime());
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
